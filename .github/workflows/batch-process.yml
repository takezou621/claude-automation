name: Batch Process PRs and Issues

on:
  schedule:
    # Run every 2 hours during business hours (9 AM - 5 PM UTC)
    - cron: '0 9,11,13,15,17 * * 1-5'
  workflow_dispatch:
    inputs:
      type:
        description: 'Type of batch processing'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - prs
        - issues

jobs:
  batch-process:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run system health check
        run: npm run automation:health
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          
      - name: Process PRs and Issues
        if: github.event.inputs.type == 'both' || github.event.inputs.type == '' || github.event_name == 'schedule'
        run: npm run automation:batch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          
      - name: Process PRs only
        if: github.event.inputs.type == 'prs'
        run: npm run cli batch --prs-only
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          
      - name: Process Issues only
        if: github.event.inputs.type == 'issues'
        run: npm run cli batch --issues-only
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          
      - name: Generate statistics report
        run: npm run automation:stats
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          
      - name: Create summary comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Create a summary comment for the latest PR or issue
            const summary = `## ðŸ¤– Batch Processing Summary
            
            **Timestamp:** ${new Date().toISOString()}
            **Trigger:** ${context.eventName}
            **Type:** ${context.payload.inputs?.type || 'both'}
            
            âœ… Batch processing completed successfully!
            
            Check the workflow logs for detailed results.
            
            ---
            *This comment was generated by Claude Automation*`;
            
            // Find the latest open PR or issue to comment on
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              per_page: 1
            });
            
            if (prs.length > 0) {
              await github.rest.issues.createComment({
                issue_number: prs[0].number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  notify-on-failure:
    needs: batch-process
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Notify on failure
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Batch Processing Failed',
              body: `## Batch Processing Failure Report
              
              **Timestamp:** ${new Date().toISOString()}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              
              The automated batch processing job has failed. Please check the workflow logs for details.
              
              **Action Required:**
              - Review the workflow logs
              - Check API quotas and rate limits
              - Verify system configuration
              - Run manual health check
              
              **Quick Commands:**
              \`\`\`bash
              npm run automation:health
              npm run automation:batch
              \`\`\`
              
              ---
              *This issue was automatically created by Claude Automation*`,
              labels: ['automation', 'bug', 'needs-attention']
            });
            
            console.log('Failure notification issue created');

  cost-monitoring:
    needs: batch-process
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate cost report
        run: |
          echo "## ðŸ’° Cost Monitoring Report" >> cost-report.md
          echo "" >> cost-report.md
          echo "**Generated:** $(date)" >> cost-report.md
          echo "" >> cost-report.md
          
          # Get stats and calculate costs
          npm run automation:stats > stats.json 2>/dev/null || echo '{"processedPRs": 0, "processedIssues": 0}' > stats.json
          
          echo "**Statistics:**" >> cost-report.md
          echo "- PRs Processed: $(jq -r '.processedPRs // 0' stats.json)" >> cost-report.md
          echo "- Issues Processed: $(jq -r '.processedIssues // 0' stats.json)" >> cost-report.md
          
          # Calculate estimated costs
          pr_cost=$(echo "$(jq -r '.processedPRs // 0' stats.json) * 0.001" | bc -l)
          issue_cost=$(echo "$(jq -r '.processedIssues // 0' stats.json) * 0.0005" | bc -l)
          total_cost=$(echo "$pr_cost + $issue_cost" | bc -l)
          
          echo "" >> cost-report.md
          echo "**Estimated Costs:**" >> cost-report.md
          echo "- PR Reviews: \$$(printf '%.4f' $pr_cost)" >> cost-report.md
          echo "- Issue Classifications: \$$(printf '%.4f' $issue_cost)" >> cost-report.md
          echo "- **Total: \$$(printf '%.4f' $total_cost)**" >> cost-report.md
          
          echo "" >> cost-report.md
          echo "---" >> cost-report.md
          echo "*Report generated by Claude Automation*" >> cost-report.md
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GITHUB_OWNER: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          
      - name: Upload cost report
        uses: actions/upload-artifact@v4
        with:
          name: cost-report
          path: cost-report.md
          
      - name: Comment cost report on latest PR
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = fs.readFileSync('cost-report.md', 'utf8');
              
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                sort: 'updated',
                per_page: 1
              });
              
              if (prs.length > 0) {
                await github.rest.issues.createComment({
                  issue_number: prs[0].number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: report
                });
              }
            } catch (error) {
              console.log('Could not post cost report:', error.message);
            }