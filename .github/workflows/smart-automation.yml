name: Smart Automation - Auto Implementation

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
  issue_comment:
    types: [created]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}

jobs:
  detect-automation-trigger:
    name: Detect Automation Trigger
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/claude'))
    
    outputs:
      should_automate: ${{ steps.check-labels.outputs.should_automate }}
      priority: ${{ steps.check-labels.outputs.priority }}
      type: ${{ steps.check-labels.outputs.type }}
      complexity: ${{ steps.check-labels.outputs.complexity }}
      component: ${{ steps.check-labels.outputs.component }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check automation labels
        id: check-labels
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(label => label.name);
            
            // Check for automation trigger labels
            const automationTriggers = ['claude-ready', 'auto-implement', 'claude-review', 'claude-analyze'];
            const hasAutomationTrigger = labels.some(label => automationTriggers.includes(label));
            
            // Check for required labels
            const hasPriority = labels.some(label => label.startsWith('priority:'));
            const hasType = labels.some(label => label.startsWith('type:'));
            
            // Extract label values
            const priority = labels.find(label => label.startsWith('priority:'))?.replace('priority:', '') || 'medium';
            const type = labels.find(label => label.startsWith('type:'))?.replace('type:', '') || 'feature';
            const complexity = labels.find(label => label.startsWith('complexity:'))?.replace('complexity:', '') || 'moderate';
            const component = labels.find(label => label.startsWith('component:'))?.replace('component:', '') || 'general';
            
            const shouldAutomate = hasAutomationTrigger && hasPriority && hasType;
            
            console.log(`Automation check: ${shouldAutomate}`);
            console.log(`Labels: ${labels.join(', ')}`);
            console.log(`Priority: ${priority}, Type: ${type}, Complexity: ${complexity}, Component: ${component}`);
            
            core.setOutput('should_automate', shouldAutomate);
            core.setOutput('priority', priority);
            core.setOutput('type', type);
            core.setOutput('complexity', complexity);
            core.setOutput('component', component);
            
            // Add status label if automation triggered
            if (shouldAutomate) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['status:planning']
              });
            }

  analyze-issue:
    name: Analyze Issue with Claude
    runs-on: ubuntu-latest
    needs: detect-automation-trigger
    if: needs.detect-automation-trigger.outputs.should_automate == 'true'
    
    steps:
      - name: Post analysis comment
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ü§ñ Claude Smart Automation Analysis
            
            **Issue Type**: ${{ needs.detect-automation-trigger.outputs.type }}
            **Priority**: ${{ needs.detect-automation-trigger.outputs.priority }}
            **Complexity**: ${{ needs.detect-automation-trigger.outputs.complexity }}
            **Component**: ${{ needs.detect-automation-trigger.outputs.component }}
            
            ### üìã Analysis
            Smart Automation system has detected this issue as ready for automated processing.
            
            ### üõ†Ô∏è Implementation Plan
            Based on the labels, this will be processed with ${('${{ needs.detect-automation-trigger.outputs.priority }}' === 'critical' || '${{ needs.detect-automation-trigger.outputs.priority }}' === 'high') ? 'high priority automated implementation' : 'standard workflow'}.
            
            ### üöÄ Next Steps
            ${('${{ needs.detect-automation-trigger.outputs.priority }}' === 'critical' || '${{ needs.detect-automation-trigger.outputs.priority }}' === 'high') ? '‚úÖ Ready for automated implementation' : '‚è≥ Waiting for manual review'}
            
            *This analysis was generated automatically by Claude Smart Automation.*
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  create-implementation-branch:
    name: Create Implementation Branch
    runs-on: ubuntu-latest
    needs: [detect-automation-trigger, analyze-issue]
    if: |
      needs.detect-automation-trigger.outputs.should_automate == 'true' &&
      (needs.detect-automation-trigger.outputs.priority == 'critical' || 
       needs.detect-automation-trigger.outputs.priority == 'high')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        run: |
          git config --global user.name "Claude Smart Automation"
          git config --global user.email "claude-automation@noreply.github.com"
          
      - name: Create implementation branch
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          TYPE: ${{ needs.detect-automation-trigger.outputs.type }}
          COMPONENT: ${{ needs.detect-automation-trigger.outputs.component }}
        run: |
          # Create branch name
          BRANCH_NAME="${TYPE}/${COMPONENT}/issue-${ISSUE_NUMBER}"
          echo "Creating branch: $BRANCH_NAME"
          
          # Create and push branch
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          
          # Add comment
          gh issue comment $ISSUE_NUMBER --body "üåø **Auto-created implementation branch**: \`$BRANCH_NAME\`

          The smart automation system has created a dedicated branch for this implementation."