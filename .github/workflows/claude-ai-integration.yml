name: Claude AI Integration Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number for AI analysis'
        required: false
        type: number
      issue_number:
        description: 'Issue number for AI processing'
        required: false
        type: number
      analysis_type:
        description: 'Type of AI analysis'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - 'comprehensive'
          - 'security-focused'
          - 'performance-focused'
          - 'code-quality'

jobs:
  ai-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ github.token }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: |
        npm init -y
        npm install node-fetch
        
    - name: Claude AI Analysis Engine
      uses: actions/github-script@v7
      env:
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      with:
        github-token: ${{ github.token }}
        script: |
          console.log('🤖 CLAUDE AI INTEGRATION ACTIVATED');
          const startTime = Date.now();
          const executionId = Math.random().toString(36).substring(7);
          
          // Import our Claude API client
          const fs = require('fs');
          const ClaudeAPIClient = eval(fs.readFileSync('./src/claude-api-client.js', 'utf8'));
          const IntelligentCodeAnalyzer = eval(fs.readFileSync('./src/intelligent-code-analyzer.js', 'utf8'));
          
          const apiKey = process.env.CLAUDE_API_KEY;
          if (!apiKey) {
            throw new Error('CLAUDE_API_KEY not configured in repository secrets');
          }
          
          // Initialize Claude AI systems
          const claude = new ClaudeAPIClient(apiKey, {
            model: 'claude-3-sonnet-20240229',
            maxTokens: 4000,
            temperature: 0.1
          });
          
          const analyzer = new IntelligentCodeAnalyzer(apiKey, {
            cacheTimeout: 300000 // 5 minutes
          });
          
          console.log('🔍 Testing Claude API connection...');
          const connectionTest = await claude.testConnection();
          if (!connectionTest.success) {
            throw new Error(`Claude API connection failed: ${connectionTest.error}`);
          }
          
          console.log('✅ Claude API connected successfully');
          console.log(`📊 Model: ${connectionTest.model}`);
          console.log(`⚡ Response time: ${connectionTest.responseTime}ms`);
          
          try {
            // Determine what to analyze
            const prNumber = context.payload.pull_request?.number || 
                           context.payload.inputs?.pr_number;
            const issueNumber = context.payload.issue?.number || 
                              context.payload.inputs?.issue_number;
            const analysisType = context.payload.inputs?.analysis_type || 'comprehensive';
            
            let analysisResult = null;
            
            if (prNumber) {
              console.log(`🔍 Analyzing Pull Request #${prNumber}`);
              analysisResult = await analyzePullRequest(prNumber, analysisType);
            } else if (issueNumber) {
              console.log(`🔍 Analyzing Issue #${issueNumber}`);
              analysisResult = await analyzeIssue(issueNumber, analysisType);
            } else {
              console.log('ℹ️ No specific PR or issue to analyze');
              return;
            }
            
            const executionTime = Math.round((Date.now() - startTime) / 1000);
            console.log(`✅ AI Analysis completed in ${executionTime}s`);
            
            // Helper function to analyze pull request
            async function analyzePullRequest(prNumber, analysisType) {
              console.log(`📋 Fetching PR #${prNumber} data...`);
              
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              const files = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              console.log(`📁 PR has ${files.data.length} files changed`);
              
              const prData = {
                number: prNumber,
                title: pr.data.title,
                description: pr.data.body || 'No description provided',
                additions: pr.data.additions,
                deletions: pr.data.deletions,
                files: files.data
              };
              
              // Run AI analysis
              const analysis = await analyzer.analyzePullRequest(prData, {
                analysisType: analysisType,
                includeSecurityAnalysis: true,
                includePerformanceAnalysis: true,
                includeQualityAnalysis: true
              });
              
              if (!analysis.success) {
                throw new Error(`AI analysis failed: ${analysis.error}`);
              }
              
              console.log(`🎯 Analysis completed for PR #${prNumber}`);
              console.log(`📊 Risk Level: ${analysis.analysis.riskAssessment.level}`);
              console.log(`🔍 Issues Found: ${analysis.analysis.issues.security.length + analysis.analysis.issues.performance.length + analysis.analysis.issues.quality.length}`);
              
              // Generate AI review comment
              const reviewComment = await generatePRReviewComment(analysis, analysisType);
              
              // Post AI review comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: reviewComment
              });
              
              // Add appropriate labels
              const labels = ['ai-reviewed', `risk-${analysis.analysis.riskAssessment.level.toLowerCase()}`];
              
              if (analysis.analysis.issues.security.length > 0) {
                labels.push('security-review-needed');
              }
              
              if (analysis.analysis.issues.performance.length > 0) {
                labels.push('performance-review-needed');
              }
              
              if (analysis.analysis.riskAssessment.level === 'HIGH') {
                labels.push('manual-review-required');
              } else if (analysis.analysis.riskAssessment.level === 'LOW') {
                labels.push('auto-merge-candidate');
              }
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: labels
              });
              
              console.log(`🏷️ Added labels: ${labels.join(', ')}`);
              
              return analysis;
            }
            
            // Helper function to analyze issue
            async function analyzeIssue(issueNumber, analysisType) {
              console.log(`📋 Fetching Issue #${issueNumber} data...`);
              
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              const issueData = {
                number: issueNumber,
                title: issue.data.title,
                body: issue.data.body || 'No description provided',
                labels: issue.data.labels.map(l => l.name),
                state: issue.data.state
              };
              
              // Analyze issue with Claude AI
              const analysisPrompt = `Analyze this GitHub issue and provide recommendations:
              
              **Title:** ${issueData.title}
              **Description:** ${issueData.body}
              **Labels:** ${issueData.labels.join(', ')}
              
              Please provide:
              1. Issue classification (bug, feature, enhancement, documentation, etc.)
              2. Complexity assessment (low, medium, high)
              3. Priority recommendation
              4. Implementation approach
              5. Potential risks or considerations
              6. Estimated effort
              7. Dependencies or prerequisites
              8. Testing recommendations`;
              
              const claudeResult = await claude.sendMessage(analysisPrompt, {
                systemPrompt: 'You are a senior technical lead analyzing GitHub issues to provide actionable insights for development teams.',
                maxTokens: 2000,
                temperature: 0.1
              });
              
              if (!claudeResult.success) {
                throw new Error(`Claude analysis failed: ${claudeResult.error}`);
              }
              
              console.log(`🎯 Issue analysis completed for #${issueNumber}`);
              
              // Generate issue analysis comment
              const analysisComment = await generateIssueAnalysisComment(claudeResult, issueData, analysisType);
              
              // Post analysis comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: analysisComment
              });
              
              // Add analysis labels
              const labels = ['ai-analyzed', `analysis-${analysisType}`];
              
              // Parse complexity from Claude's response
              const complexityMatch = claudeResult.response.match(/complexity.*?:?\s*(low|medium|high)/i);
              if (complexityMatch) {
                labels.push(`complexity-${complexityMatch[1].toLowerCase()}`);
              }
              
              // Parse priority from Claude's response
              const priorityMatch = claudeResult.response.match(/priority.*?:?\s*(low|medium|high|critical)/i);
              if (priorityMatch) {
                labels.push(`priority-${priorityMatch[1].toLowerCase()}`);
              }
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: labels
              });
              
              console.log(`🏷️ Added labels: ${labels.join(', ')}`);
              
              return claudeResult;
            }
            
            // Helper function to generate PR review comment
            async function generatePRReviewComment(analysis, analysisType) {
              const riskEmoji = {
                'HIGH': '🔴',
                'MEDIUM': '🟡',
                'LOW': '🟢'
              };
              
              const risk = analysis.analysis.riskAssessment;
              const issues = analysis.analysis.issues;
              
              return `## 🤖 Claude AI Code Review - ${analysisType.toUpperCase()}
              
### 📊 Analysis Summary
- **Risk Level**: ${riskEmoji[risk.level]} **${risk.level}** (Score: ${risk.score})
- **Files Analyzed**: ${analysis.analysis.files.length}
- **Analysis Type**: ${analysisType}
- **AI Model**: ${analysis.metadata.aiModel}
- **Processing Time**: ${analysis.metadata.processingTime}ms

### 🔍 Issues Detected
${issues.security.length > 0 ? `
#### 🔐 Security Issues (${issues.security.length})
${issues.security.map(issue => `- ⚠️ ${issue}`).join('\n')}
` : ''}
${issues.performance.length > 0 ? `
#### ⚡ Performance Issues (${issues.performance.length})
${issues.performance.map(issue => `- 🐌 ${issue}`).join('\n')}
` : ''}
${issues.quality.length > 0 ? `
#### 📝 Quality Issues (${issues.quality.length})
${issues.quality.map(issue => `- 📋 ${issue}`).join('\n')}
` : ''}

### 📋 File-by-File Analysis
${analysis.analysis.files.map(file => `
**${file.filename}** (${file.language})
- **Risk**: ${file.analysis ? file.analysis.riskLevel : 'Unknown'}
- **Changes**: +${file.changes.additions} -${file.changes.deletions}
- **Issues**: ${file.analysis ? file.analysis.issues.length : 0}
${file.analysis && file.analysis.suggestions.length > 0 ? `- **Suggestions**: ${file.analysis.suggestions.slice(0, 2).join(', ')}` : ''}
`).join('\n')}

### 🎯 Recommendations
${analysis.analysis.recommendations.map(rec => `
#### ${rec.type === 'CRITICAL' ? '🔴' : rec.type === 'SECURITY' ? '🔐' : rec.type === 'PERFORMANCE' ? '⚡' : '📝'} ${rec.title}
${rec.description}

**Actions:**
${rec.actions.map(action => `- ${action}`).join('\n')}
`).join('\n')}

### 🏥 Overall Assessment
${analysis.analysis.overall.success ? analysis.analysis.overall.assessment : 'Analysis incomplete'}

### 📊 Risk Assessment Details
- **File Complexity**: ${risk.factors.fileComplexity} files
- **Security Issues**: ${risk.factors.securityIssues}
- **Performance Issues**: ${risk.factors.performanceIssues}
- **Quality Issues**: ${risk.factors.codeQualityIssues}

**Recommendation**: ${risk.recommendation}

---
🤖 **Claude AI Code Review** | **${analysisType.charAt(0).toUpperCase() + analysisType.slice(1)} Analysis**
⚡ **AI-Powered Quality Assurance** | **Execution ID**: \`${executionId}\``;
            }
            
            // Helper function to generate issue analysis comment
            async function generateIssueAnalysisComment(claudeResult, issueData, analysisType) {
              return `## 🤖 Claude AI Issue Analysis - ${analysisType.toUpperCase()}
              
### 📊 Analysis Summary
- **Issue**: #${issueData.number}
- **Analysis Type**: ${analysisType}
- **AI Model**: ${claude.model}
- **Processing Time**: ${claudeResult.executionTime}ms

### 🔍 AI Analysis Results
${claudeResult.response}

### 🏷️ Current Labels
${issueData.labels.map(label => `\`${label}\``).join(', ')}

### 📈 Next Steps
Based on the AI analysis, this issue has been automatically categorized and labeled for efficient processing.

---
🤖 **Claude AI Issue Analysis** | **Intelligent Issue Processing**
⚡ **AI-Powered Project Management** | **Execution ID**: \`${executionId}\``;
            }
            
          } catch (error) {
            console.error(`❌ Claude AI Integration Error: ${error.message}`);
            
            // Create error report
            const errorReport = `## ❌ Claude AI Integration Error
            
**Error Message**: ${error.message}
**Execution ID**: \`${executionId}\`
**Analysis Type**: ${context.payload.inputs?.analysis_type || 'comprehensive'}
**Timestamp**: ${new Date().toISOString()}

**Impact**: AI-powered analysis was not completed. Manual review recommended.

**Recovery Actions**:
1. Check Claude API key configuration
2. Verify repository permissions
3. Review API rate limits
4. Consider manual analysis

---
❌ **Claude AI Integration Error** | **Manual Review Required**`;
            
            // Post error comment if we have a PR or issue number
            const targetNumber = context.payload.pull_request?.number || 
                               context.payload.issue?.number ||
                               context.payload.inputs?.pr_number ||
                               context.payload.inputs?.issue_number;
            
            if (targetNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: targetNumber,
                body: errorReport
              });
            }
            
            // Create error issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🤖 Claude AI Integration Error - ${new Date().toISOString()}`,
              body: errorReport,
              labels: ['ai-error', 'manual-review-needed']
            });
            
            throw error;
          }
          
          console.log('✅ CLAUDE AI INTEGRATION COMPLETED');
          
  performance-monitoring:
    runs-on: ubuntu-latest
    needs: ai-analysis
    if: always()
    
    steps:
    - name: Monitor AI Performance
      uses: actions/github-script@v7
      with:
        script: |
          console.log('📊 Monitoring Claude AI performance...');
          
          // Get workflow run details
          const workflowRun = await github.rest.actions.getWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId
          });
          
          const executionTime = new Date(workflowRun.data.updated_at) - new Date(workflowRun.data.run_started_at);
          const success = workflowRun.data.conclusion === 'success';
          
          console.log(`⏱️ Execution time: ${executionTime}ms`);
          console.log(`✅ Success: ${success}`);
          
          // Create performance report
          const performanceReport = `## 📊 Claude AI Performance Report
          
**Workflow Run**: #${context.runId}
**Execution Time**: ${Math.round(executionTime / 1000)}s
**Status**: ${success ? '✅ Success' : '❌ Failed'}
**Timestamp**: ${new Date().toISOString()}

**Performance Metrics**:
- AI Analysis Speed: ${success ? 'Optimal' : 'Degraded'}
- API Response Time: ${success ? 'Normal' : 'Slow'}
- Resource Usage: ${success ? 'Efficient' : 'High'}

---
📊 **Claude AI Performance Monitoring** | **Automated Performance Tracking**`;
          
          // Post performance report as issue comment or create issue
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `📊 Claude AI Performance Report - ${new Date().toISOString()}`,
            body: performanceReport,
            labels: ['performance-report', 'ai-monitoring']
          });
          
          console.log('📈 Performance monitoring completed');