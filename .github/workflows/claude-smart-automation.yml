name: Claude Smart Automation

on:
  schedule:
    # Weekday nights (23:00, 02:00, 05:00 JST)
    - cron: '0 14,17,20 * * 1-5'
    # Weekend days (10:00, 14:00, 18:00, 22:00 JST)
    - cron: '0 1,5,9,13 * * 0,6'
  workflow_dispatch:
    inputs:
      target_issues:
        description: 'Specific issues to process (comma-separated)'
        required: false
        type: string

jobs:
  smart-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Smart Automation Processing
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('🚀 SMART AUTOMATION START');
          const targetLabels = ['claude-processed', 'claude-ready', 'automation-ready'];

          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: targetLabels.join(',')
          });

          if (issues.data.length === 0) {
            console.log('No automation-ready issues found.');
            return;
          }

          for (const issue of issues.data) {
            console.log(`\n🔍 Processing Issue #${issue.number}: ${issue.title}`);

            const branchPatterns = [
              `issue-${issue.number}`,
              `claude-${issue.number}`,
              `feature/issue-${issue.number}`,
              `fix/issue-${issue.number}`,
              `claude/issue-${issue.number}`,
              `automation-${issue.number}`
            ];

            const branches = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const claudeBranch = branches.data.find(branch =>
              branchPatterns.some(pattern => branch.name.includes(pattern))
            );

            if (!claudeBranch) {
              console.log(`No Claude branch found for Issue #${issue.number}`);
              continue;
            }

            console.log(`Found branch: ${claudeBranch.name}`);

            const existingPRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${claudeBranch.name}`,
              state: 'open'
            });

            let prNumber;
            if (existingPRs.data.length === 0) {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `fix: ${issue.title} (closes #${issue.number})`,
                head: claudeBranch.name,
                base: 'main',
                body: `## 🚀 Claude Smart Automation\n\n### 関連Issue\nCloses #${issue.number}`
              });
              prNumber = pr.data.number;
              console.log(`✅ Created PR #${prNumber}`);
            } else {
              prNumber = existingPRs.data[0].number;
              console.log(`Found existing PR #${prNumber}`);
            }

            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash'
              });
              console.log(`✅ Merged PR #${prNumber}`);

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `🚀 **Claude Smart Automation 完了**\n\nIssue #${issue.number} の自動化処理が完了しました。`
              });

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });

              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['claude-completed', 'smart-automation']
              });

              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${claudeBranch.name}`
              });
              console.log(`🗑️ Deleted branch ${claudeBranch.name}`);

            } catch (error) {
              console.log(`❌ Failed to process PR #${prNumber}: ${error.message}`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `🤖 **Auto-merge Notice**\n\nAuto-merge failed. Manual intervention required.\n\nError: ${error.message}`
              });
            }
          }
